import cv2
import numpy as np
import matplotlib.pyplot as plt

def add_watermark(original_image_path, watermark_path, output_path):
    # Read the original image and the watermark image
    original_image = cv2.imread(original_image_path)
    watermark = cv2.imread(watermark_path, cv2.IMREAD_UNCHANGED)

    # Resize the watermark to fit the original image
    watermark_height, watermark_width, _ = watermark.shape
    original_height, original_width, _ = original_image.shape
    scale_factor = 0.3  # You can adjust this scale factor as needed
    new_height = int(original_height * scale_factor)
    new_width = int(watermark_width * (new_height / watermark_height))
    watermark = cv2.resize(watermark, (new_width, new_height))

    # Define the position to place the watermark (bottom right corner)
    x_offset = original_width - new_width
    y_offset = original_height - new_height

    # Blend the original image and the watermark
    for c in range(0, 3):
        original_image[y_offset:y_offset + new_height, x_offset:x_offset + new_width, c] = \
            original_image[y_offset:y_offset + new_height, x_offset:x_offset + new_width, c] * \
            (1 - watermark[:, :, 3] / 255.0) + \
            watermark[:, :, c] * (watermark[:, :, 3] / 255.0)

    # Save the watermarked image
    cv2.imwrite(output_path, original_image)

    # Display the watermarked image
    watermarked_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB)
    plt.imshow(watermarked_image)
    plt.title('Watermarked Image')
    plt.axis('off')
    plt.show()

# Paths to the original image, watermark, and output
original_image_path = 'path_to_original_image.jpg'
watermark_path = 'path_to_watermark.png'  # PNG with transparency channel
output_path = 'path_to_output_watermarked_image.jpg'

# Add watermark to the original image
add_watermark(original_image_path, watermark_path, output_path)
